{
  "title": "Geopulse Hub",
  "description": "Geopulse Hub Gestión de usuarios y su localización en tiempo real o en segundo plano.",
  "repository": "https://github.com/4lanPz/AM_Proyecto-final-2024A",
  "date": "2024-07-20",
  "published": true,
  "content": "# Proyecto final Aplicaciones MÃ³viles utilizando Flutter\nWeb: https://proyectofinalmoviles2024a.web.app/\n\n# Integrantes\n- Christian PaÃ±ora\n- Alan Perez\n- Ingrith Revelo\n\n\n## Funcionalidades\n- Login con Firebase y con Gmail\n- Registro con Firebase\n- Barra de navegaciÃ³n\n- AdministraciÃ³n de usuarios (admin y user)\n- UbicaciÃ³n en tiempo real\n- UbicaciÃ³n en segundo plano\n- CÃ¡lculo de Ã¡rea del polÃ­gono\n\n## Herramientas\n\n- Visual Studio Code\n- Flutter\n- Android Studio\n- Node\n- Firebase\n\n## Descargar paquetes flutter\n\nEjecutar el siguiente comando para poder descargar todo lo necesario del proyecto\n\n```bash\nflutter pub get  \n```\n\n## Variables\n### Ejecutar el siguiente comando para poder generar sus variables de Firebase como google-service.json\n\n```bash\nflutter pub global activate flutterfire_cli\nflutterfire configure    \n```\n\nEditar la configuraciÃ³n del proyecto en Firebase para agregar las huellas digitales con el siguiente comando en cmd (generar 2 una para debug y la otra para release)\n```bash\nkeytool -list -v -keystore \"%USERPROFILE%\\.android\\debug.keystore\" -alias androiddebugkey -storepass android -keypass android    \n```\n### Agregar Api Key de Google Maps\nGnerar su Api key de Google Maps directamente de la pÃ¡gina de Google Developer y permitir todas las funciones de Maps para Android y Web\nAgregar la Api key en el archivo con el nombre: GOOGLE_MAPS_API_KEY\n- .env\n- local.propierties\n\n## Icono de notificacion\nGenerar un Ã­cono simple para las notificaciones en segundo plano en cualquier pÃ¡gina a su elecciÃ³n, y agregar el archivo \"ic_launcher.xml\" en la carpeta y en el resto de carpetas pegar el archivo \"ic_launcher.png\"\n\n```bash\nnombreproyecto/\nâââ android/\nâ   ââââ app/   <----------\nâ   â   âââ src/  <---------- \nâ   â   â   ââââ main/ <---------- \nâ   â   â   â   ââââ res/  <---------- \nâ   â   â   â   â   ââââ drawable/  <---------- aqui pegar el archivo xml\nâ   â   â   â   â   ââââ resto de carpetas/  <---------- aqui pegar el archivo png\n```\n## Generar APK\nEjecutar el siguiente comando y buscar la APK generada en build/app/flutter-apk/\n```bash\nflutter build apk --release\n```\n\n## Deploy Web\nPrimero ejecutar los siguientes comandos para poder tener las herramientas necesarias\n```bash\nnpm install -g firebase-tools\nnpx firebase login\nnpx firebase hosting init\n```\nConfigurar nuestra pagina web en nuestra apliacion de Firebase para permitir generar un dominio personalizado.\n\n\nAgregar las variables web para iniciar sesion en web y agregarlas en index.html, estas se pueden conseguir en la configuracion de Firebase\n\n\nAhora  primero haremos el build web para poder copiar el contenido a la carpeta public, ahora aÃ±adir el nombre personalizado de su app en el archivo firebase.json de hosting\n```bash\nflutter deploy web\n```\nFinalmente luego de copiar el contenido de build/web a public ejecutamos el siguiente comando\n\n```bash\nnpx firebase deploy --only hosting:nombredesuproyecto\n```\n\n## Capturas\n\n### WEB:\n![image](https://github.com/user-attachments/assets/d233633e-ace8-4c46-ae7a-7091ee8c4c2d)\n\n\n![image](https://github.com/user-attachments/assets/1ae3a6a3-62be-4eca-addd-06af1e88c7e6)\n\n### MOVIL:\n![image](https://github.com/user-attachments/assets/2b2d433f-0938-4ece-9590-e245938cf61d)\n\n![image](https://github.com/user-attachments/assets/77761d16-b8cb-4f18-bec3-89de932815c7)\n\n# GeneraciÃ³n de la firma en Flutter\n## Generar un Ã­cono\nAÃ±adir la dependencia \n```bash\nflutter pub add flutter_launcher_icons\n```\ny aÃ±adir el sistema al cual le quieras aÃ±adir el Ã­cono, el Ã­cono se debe encontrar en una carpeta assets, esto se realiza en el archivo yalm\n```bash\ndev_dependencies:\n  flutter_launcher_icons: \"^0.13.1\"\n\nflutter_launcher_icons:\n  android: \"launcher_icon\"\n  ios: true\n  image_path: \"assets/icon/icon.png\"\n  min_sdk_android: 21 # android min sdk min:16, default 21\n  web:\n    generate: true\n    image_path: \"path/to/image.png\"\n    background_color: \"#hexcode\"\n    theme_color: \"#hexcode\"\n  windows:\n    generate: true\n    image_path: \"path/to/image.png\"\n    icon_size: 48 # min:48, max:256, default: 48\n  macos:\n    generate: true\n    image_path: \"path/to/image.png\"\n```\n\nLuego ejecutar el siguiente comando para generar los Ã­conos en sus diferentes formatos para las diferentes plataformas que se hayan elegido\n```bash\nflutter pub run flutter_launcher_icons\n```\n## GneraciÃ³n de llave \nEjecutar el siguiente comando para poder generar la llave que se utiliza para firmar la app\n\n```bash\nmacOS / Linux\nkeytool -genkey -v -keystore path/a/tu/carpeta -keyalg RSA \\\n        -keysize 2048 -validity 10000 -alias upload\n\nWindows\nkeytool -genkey -v -keystore path/a/tu/carpeta `\n        -storetype JKS -keyalg RSA -keysize 2048 -validity 10000 `\n        -alias upload\n```\n\n## ConfiguraciÃ³n en app\nPrimero agrefar la dependiencia en app/build.graddle\n```bash\nimplementation(\"com.google.android.material:material:<version>\")\n```\nAhora creamos el archivo key.properties en la raiz de app, en esta vamos a ingresar los datos que nos pide para la generaciÃ³n de la llave\n```bash\nkey.properties\n\nstorePassword=<password-from-previous-step>\nkeyPassword=<password-from-previous-step>\nkeyAlias=upload\nstoreFile=<keystore-file-location>\n```\n### Recordar que el path en storeFile no debe ser directamente en tu pc local si no en la carpeta dentro del proyecto para que al utilizar en otro dispositivo no de error al momento de encontrar la key\n\nAhora en app/build.graddle agregamos esto para configurar la llave y la firma en la versiÃ³n release y que tome los datos del archivo key.properties\n\n```bash\nConfigure signing in gradle\n#\nAntes del apartado android\n\n   def keystoreProperties = new Properties()\n   def keystorePropertiesFile = rootProject.file('key.properties')\n   if (keystorePropertiesFile.exists()) {\n       keystoreProperties.load(new FileInputStream(keystorePropertiesFile))\n   }\n\nandroid {\n        ..\n}\n-----------------------------------------\nDentro del apartado android\n    android {\n        ...\n\n       signingConfigs {\n           release {\n               keyAlias keystoreProperties['keyAlias']\n               keyPassword keystoreProperties['keyPassword']\n               storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null\n               storePassword keystoreProperties['storePassword']\n           }\n       }\n        buildTypes {\n           release {\n\n                signingConfig signingConfigs.debug\n                signingConfig signingConfigs.release\n           }\n        }\n    ...\n    }\n```\n# Generar APK firmada\nEjecutar el comando \n```bash\nflutter build apk --release\no\nflutter run --release\n```\n\n# APKPURE\n![image](https://github.com/user-attachments/assets/5b9d5a12-1ba5-4ebb-b89a-81c5ce513560)\n\n"
}
