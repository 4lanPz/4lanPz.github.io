{
  "title": "PhotoGallery",
  "description": "APP Ionic Angular que permite tomar fotos y guardarlas en una galeria",
  "repository": "https://github.com/4lanPz/AM-PhotoGallery-2024A",
  "date": "2024-05-06",
  "published": true,
  "content": "# PhotoGallery\n\nHacer un aplicacion bÃ¡sica de cÃ¡mara que almacene las fotos utilizando Ionic, Visual Studio Code y Android Studio\n\n## Clonar\n```bash\nGit clone https://github.com/4lanPz/AM-PhotoGallery-2024A\n```\n\n## Pasos\n\n- 1 Pre requisitos\n\nTener instalado Node.JS y Npm\nTener un IDE para customizar nuestro proyecto en este caso Visual Studio Code\nTener Android Studio configurado\nEstos se pueden descargar desde la pagina web oficial de dependiendo de el OS que estes utilizando.\n\n- 2 Empezar el proyecto\n\nEn este nombreproyecto es el nombre que le vamos a poner a nuestro proyecto, por lo que se puede poner el\nque tu quieras para tu proyecto.\n\nEn este tambien debemos elegir que mÃ³dulos vamos a ocupar, en este caso vamos a ocupar \"NGModules\"\n\nAl finalizar no es necesario tener una cuenta de Ionic, asi que eso podemos indicar que no y con eso nuestro\nproyecto se ha creado\n\n- 3 Navegar al directorio e intalaciÃ³n dependencias\n\nUtilizando la consola CMD podemos ir a el directorio de nuestro proyecto con \n```bash\ncd nombreproyecto\n```\n\nDentro de esta carpeta tendremos que instalar los mÃ³dulos necesarios para que se ejecute nuestro proyecto:\n\n```bash\nnpm install\n```\n\n- 4 Funcionalidades\nPara que funcione correctamente las funciones de tomar y guardar las fotos en la galerÃ­a, es necesario el servicio de camera y save picture\n\nPara ello necesitaremos utilizar la API de Filesystem, en este se debe configurar la funcionalidades despues de instalar los capacitors con:\n```bash\nnpm install @capacitor/camera\nnpm install @capacitor/filesystem\nnpm install @capacitor/splash-screen\n```\nAhora ya con todo instalado correctamente podemos pasar a iniciar el servicio de la camara y el almacenamiento de las imagenes creando un directorio llamado services\n```bash\nnpx ionic g service services/photo\n\n```\nDentro de esta carpeta necesitaremos editar el archivo \"Photo.service.ts\" \nEn este archivo vamos a codificar todos los datos necesarios para la funcionalidad de poder guardar datos y cargar datos.\nPara ello necesitaremos crear clases async para poder guardar las fotos como addNewToGallery, que cada vez que tome una foto esta se podra guardar con un save Picture\n\n```bash\n// toma la foto\nconst capturedPhoto = await Camera.getPhoto({\n      resultType: CameraResultType.Uri,\n      source: CameraSource.Camera,\n      quality: 100,\n    });\n// guarda la foto\n    const savedImagedFile = await this.savePicture(capturedPhoto);\n\n // Actualiza las fotos por si hay nueva o elimina\n    await Preferences.set({\n      key: this.PHOTO_STORAGE,\n      value: JSON.stringify(this.photos),\n    });\n```\n\n```bash\n// Guardar foto\nprivate async savePicture(photo: Photo){\n    // Convert photo to base64 format, required by Filesystem API to save\n    const base64Data = await this.readAsBase64(photo);\n\n    // Write the file to the data directory\n    const fileName = Date.now() + '.jpeg';\n    const savedFile = await Filesystem.writeFile({\n      path: fileName,\n      data: base64Data,\n      directory: Directory.Data\n    }) \n\n    // Use webPath to display the new image instead of base64 since it's already loaded into memory\n    return{\n      filepath: fileName,\n      webviewPath: photo.webPath\n    }\n  }\n```\n\n```bash\n// Carga la foto\npublic async loadSaved(){\n    // Retrive cached photo array data\n    const { value } = await Preferences.get({key: this.PHOTO_STORAGE});\n    this.photos = (value ? JSON.parse(value) : []) as UserPhoto[];\n\n    // Display the photo by reading into base64 format\n    for (let photo of this.photos){\n      // Read each saved photo's data from the Filesystem\n      const readFile = await Filesystem.readFile({\n        path: photo.filepath,\n        directory: Directory.Data,\n      })\n\n      // Web platform only: Load the photo as base64 data\n      photo.webviewPath = `data:image/jpeg;base64,$(readFile.data)`;\n    }\n  }\n```\nEstos cÃ³digos son los que nos permiten que en la clase addNewToGallery tenga las funcionalidades de tomar la foto y almacenarla, pero tambien vamos a codificar una funcion para poder eliminar las fotos \n```bash\n// Borra la foto\npublic async deletePhoto(index: number) {\n    const photoToRemove = this.photos[index];\n  \n    // Remove photo from array\n    this.photos.splice(index, 1);\n  \n    // Remove photo file from filesystem\n    await Filesystem.deleteFile({\n      path: photoToRemove.filepath,\n      directory: Directory.Data,\n    });\n  \n    // Update storage\n    await Preferences.set({\n      key: this.PHOTO_STORAGE,\n      value: JSON.stringify(this.photos),\n    });\n  }  \n```\n\nAhora ya con todas las funcionalidades codificadas podemos editar el HTML para que esto funcione con un botÃ³n y que las imagenes se muestren.\nEn este caso vamos a utilizar la tab 2 para mostrar las imÃ¡genes, por lo que la vamos a editar para que muestre las imÃ¡genes.\n```bash\n<ion-header [translucent]=\"true\">\n  <ion-toolbar>\n    <ion-title> Photo Gallery </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <div>\n    <ion-row>\n      <ion-grid\n        size=\"4\"\n        *ngFor=\"let Photo of photoService.photos; let i = index\"\n      >\n        <ion-img [src]=\"Photo.webviewPath\"></ion-img>\n      </ion-grid>\n    </ion-row>\n    <ion-row>\n      <ion-grid\n        size=\"4\"\n        *ngFor=\"let Photo of photoService.photos; let i = index\"\n      >\n        <ion-button (click)=\"deletePhoto(i)\" color=\"danger\">Delete</ion-button>\n      </ion-grid>\n    </ion-row>\n  </div>\n  <div>\n    <ion-fab vertical=\"bottom\" horizontal=\"center\" slot=\"fixed\">\n      <ion-fab-button (click)=\"addPhotoToGallery()\">\n        <ion-icon name=\"camera\"></ion-icon>\n      </ion-fab-button>\n    </ion-fab>\n  </div>\n</ion-content>\n\n```\nCon esto lo que hacemos es que las imagenes se vayan almacenando en un grid para que cada una vaya alojandose en un nuevo espacio y que no importe cuantas fotos haya, todas se muestren y asi mismo el boton de eliminar se muestre debajo de cada una de ellas\n- 5 SplashScreen\nPara hacer que nuestra aplicaciÃ³n tenga una imagen personalizada al momento de ejecutar la imagen en android necesitaremos hacer primero el build de la aplicacion con:\n```bash\nnpx ionic build android\nnpx ionic capacitor open android\n```\nAhora en nuestro entorno debe haberse creado una carpeta Android, en la cual deberemos ir a:\n```bash\nnombreproyecto/\nâââ Android/\nâ   âââ app/\nâ   â   âââ src/\n|   |   |   âââ main/\n|   |   |   |   âââ res/\n\n```\nDentro de esta carpeta encontraremos varias carpetas que dentro de esta tienen un archivo llamado splash.png, para cambiarlo necesitaremos una imagen y reemplazar las que ya se encontraban en el los directorios\n- 6 EjecuciÃ³n\nPara poder ejecutar nuestro proyecto simplemente necesitamos ejecutar el comando\n```bash\nNpx ionic s\n```\nEste comando ejecutarÃ¡ nuestra aplicaciÃ³n de forma web, entonces podremos comprobar que la aplicaciÃ³n es totalmente funcional.\nsi se quiere ejecutar en android se necesitan 2 comandos\n```bash\nnpx ionic build android\nnpx ionic capacitor open android\n```\nEl primero comando empezarÃ¡ a generar los archivos necesarios para que nuestra aplicaciÃ³n tambien funcione en android, loque genera una carpeta android.\nEl segundo comando lo que hace es abrir este proyecto de Android en Android Studio, esto para poder hacer la emulaciÃ³n de la aplicaciÃ³n en android o emulaciÃ³n directamente en nuestro dispositivo Android a travÃ©s de Wifi\n\n# Capturas\n### Web\n![image](https://github.com/4lanPz/AM-PhotoGallery-2024A/assets/117743495/8efa488c-bf9d-4057-870b-cd3b476359eb)\n\n![image](https://github.com/4lanPz/AM-PhotoGallery-2024A/assets/117743495/19170dd5-0cdd-42e1-b18f-c358f5305dc6)\n\n### Android\n![image](https://github.com/4lanPz/AM-PhotoGallery-2024A/assets/117743495/28d0a761-4f09-4ded-9ae8-7ae7e356e6c3)\n\n![image](https://github.com/4lanPz/AM-PhotoGallery-2024A/assets/117743495/6ad75273-b90a-4dd5-9bb3-d600f0d457b0)\n"
}
