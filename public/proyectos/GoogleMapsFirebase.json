{
  "title": "GoogleMaps Firebase",
  "description": "Almacena latitud y longitud de Google Maps en Firebase",
  "repository": "https://github.com/4lanPz/AM_GoogleMaps_2024A",
  "date": "2024-06-09",
  "published": true,
  "content": "# Ionic GeolocalizaciÃ³n\n\nHacer un pÃ¡gina que permita utilizar la API de Google Maps utilizando Ionic, Visual Studio Code y Android Studio\n\n## Clonar\n```bash\nGit clone https://github.com/4lanPz/AM_GoogleMaps_2024A\n```\nAgregar keys en \"environment.ts\" y \"environment.prod.ts\" para android\n\n## Pasos\n\n- 1 Pre requisitos\n\nTener instalado Node.JS y Npm\nTener un IDE para customizar nuestro proyecto en este caso Visual Studio Code\nGenerar key de Google Maps\nTener Android Studio configurado\nEstos se pueden descargar desde la pagina web oficial de dependiendo de el OS que estes utilizando.\n\n- 2 Empezar el proyecto\n\nPara empezar el proyecto hay que ejecutar el siguiente comando\n\n```bash\nnpx ionic Start nombreproyecto blank --type=angular\n```\n\nEn este nombreproyecto es el nombre que le vamos a poner a nuestro proyecto, por lo que se puede poner el\nque tu quieras para tu proyecto.\n\nEn este tambien debemos elegir que mÃ³dulos vamos a ocupar, en este caso vamos a ocupar \"NGModules\"\n\nAl finalizar no es necesario tener una cuenta de Ionic, asi que eso podemos indicar que no y con eso nuestro\nproyecto se ha creado\n\n- 3 Navegar al directorio e intalaciÃ³n dependencias\nUtilizando la consola CMD podemos ir a el directorio de nuestro proyecto con \n```bash\ncd nombreproyecto\n```\nDentro de esta carpeta tendremos que instalar los mÃ³dulos necesarios para que se ejecute nuestro proyecto:\n```bash\nnpm install --legacy-peer-deps\n```\nDespuÃ©s de instalar los mÃ³dulos del proyecto, es necesario generar las pÃ¡ginas y servicios necesarios para nuestra aplicaciÃ³n\nPara ello necesitamos ejecutar el siguiente comando\n```bash\nnpx ionic g page home\nnpx ionic g services/gmaps/gmaps\n```\n- 4 Funcionalidad\nTeniendo ya nuestros directorios de nuestra aplicacion primero vamos a ingresar el html en donde va a mostrarse nuestro mapa, en este caso en \"home.page.html\"\n```bash\n<ion-header>\n  <ion-toolbar>\n    <ion-title> Ionic - Google Mapas </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <div class=\"map-info\" style=\"padding: 1%;\">\n    <h3>InformaciÃ³n de ubicaciÃ³n</h3>\n    <p>{{ locationInfo }}</p>\n  </div>\n  <div class=\"map\" #map></div>\n</ion-content>\n\n```\nGracias a esto podremos saber en nuestro archivo .ts en donde va a generarse nuestras funcionalidades como el mapa y la longitud y latitud en donde coloquemos nuestro marker.\n\nAhora en nuestro archivo \"gmaps.service.ts\" vamos a codificar toda la lÃ³gica de nuestro Google Maps\n```bash\nimport { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class GmapsService {\n  private googleMaps: any;\n\n  constructor() {}\n\n  loadGoogleMaps(): Promise<any> {\n    const win = window as any;\n    const gModule = win.google;\n    if (gModule && gModule.maps) {\n      return Promise.resolve(gModule.maps);\n    }\n    return new Promise((resolve, reject) => {\n      const script = document.createElement('script');\n      script.src =\n        'https://maps.googleapis.com/maps/api/js?key=' +\n        environment.googleMapsApiKey;\n      script.async = true;\n      script.defer = true;\n      script.onload = () => {\n        const loadedGoogleModule = win.google;\n        if (loadedGoogleModule && loadedGoogleModule.maps) {\n          this.googleMaps = loadedGoogleModule.maps;\n          resolve(loadedGoogleModule.maps);\n        } else {\n          reject('Google Map SDK is not Available');\n        }\n      };\n      document.body.appendChild(script);\n    });\n  }\n\n  getGoogleMaps(): any {\n    return this.googleMaps;\n  }\n  async reverseGeocodeLatLng(latLng: { lat: number; lng: number }): Promise<string> {\n    const googleMaps = await this.loadGoogleMaps();\n    const geocoder = new googleMaps.Geocoder();\n    return new Promise<string>((resolve, reject) => {\n      geocoder.geocode({ location: latLng }, (results: any[], status: string) => {\n        if (status === googleMaps.GeocoderStatus.OK) {\n          if (results[0]) {\n            resolve(results[0].formatted_address);\n          } else {\n            reject('No results found');\n          }\n        } else {\n          reject('Geocoder failed due to: ' + status);\n        }\n      });\n    });\n  }\n}\n\n```\nEn esta utilizaremos el SDK de Google Maps para poder renderizar el mapa de google maps y asi mismo una funcion para obtener los datos de las coordenadas del marcador.\n\nAhora necesitamos generar la lÃ³gica ya que va a tener nuestro mapa, sus funcionalidades y como se va a comportar en nuestra aplicaciÃ³n, por lo que ahora en nuestro HomePage de \"home.page.ts\" \n```bash\nlocationInfo: string = ''; // Inicialmente vacÃ­o\n  @ViewChild('map', { static: true }) mapElementRef: ElementRef | undefined;\n  googleMaps: any;\n  center = { lat: -0.180653, lng: -78.467834 };\n  map: any;\n  mapClickListener: any;\n  markerClickListener: any;\n  markers: any[] = [];\n\n  constructor(\n    private gmaps: GmapsService,\n    private renderer: Renderer2,\n    private actionSheetCtrl: ActionSheetController,\n    private changeDetectorRef: ChangeDetectorRef // Agregar esta lÃ­nea\n  ) {}\n\n  ngOnInit(): void {}\n\n  ngAfterViewInit() {\n    this.loadMap();\n  }\n\n  async loadMap() {\n    try {\n      let googleMaps: any = await this.gmaps.loadGoogleMaps();\n      this.googleMaps = googleMaps;\n      if (this.mapElementRef) {\n        const mapEl = this.mapElementRef.nativeElement;\n        const location = new googleMaps.LatLng(\n          this.center.lat,\n          this.center.lng\n        );\n        this.map = new googleMaps.Map(mapEl, {\n          center: location,\n          zoom: 12,\n        });\n        this.renderer.addClass(mapEl, 'visible');\n        this.onMapClick();\n      } else {\n        console.log('mapElementRef is undefined');\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n```\nEn este necesitamos los contructores y las configuraciones el maps, como inicialmente necesitamos que se carge necesitamos indicarle cuando se cuarda y que hace, en esta funciÃ³n cuando ya estÃ¡ cargado se encuentran funciones que permiten que nuestro Mapa tenga funcionalidades ademas de solo mostrar el mapa\n```bash\nasync onMapClick() {\n    const googleMaps = await this.gmaps.loadGoogleMaps();\n    this.mapClickListener = googleMaps.event.addListener(\n      this.map,\n      'click',\n      async (mapsMouseEvent: { latLng: { toJSON: () => any } }) => {\n        console.log(mapsMouseEvent.latLng.toJSON());\n        const address = await this.gmaps.reverseGeocodeLatLng(\n          mapsMouseEvent.latLng.toJSON()\n        );\n        console.log(address);\n        if (address) {\n          this.addMarker(mapsMouseEvent.latLng, address);\n        } else {\n          console.log('Unable to fetch address for the clicked location');\n        }\n      }\n    );\n  }\n  addMarker(location: any, address: string) {\n    let googleMaps: any = this.googleMaps;\n    const icon = {\n      url: 'assets/icons/location-pin.png',\n      scaledSize: new googleMaps.Size(40, 50),\n    };\n    // Eliminar marcadores anteriores\n    this.markers.forEach((marker: any) => {\n      marker.setMap(null);\n    });\n    this.markers = [];\n    // Agregar el nuevo marcador\n    const marker = new googleMaps.Marker({\n      position: location,\n      map: this.map,\n      icon: icon,\n      title: address, // Mostrar la direcciÃ³n como tÃ­tulo del marcador\n      // draggable: true,\n      animation: googleMaps.Animation.DROP,\n    });\n    this.markers.push(marker);\n    this.markerClickListener = this.googleMaps.event.addListener(\n      marker,\n      'click',\n      () => {\n        console.log('markerclick', marker);\n        this.checkAndRemoveMarker(marker);\n        console.log('markers: ', this.markers);\n      }\n    );\n    this.locationInfo = `Latitud: ${location.lat()}, Longitud: ${location.lng()}, DirecciÃ³n: ${address}`;\n    this.changeDetectorRef.detectChanges();\n  }\n  checkAndRemoveMarker(marker: {\n    position: { lat: () => any; lng: () => any };\n  }) {\n    const index = this.markers.findIndex(\n      (x) =>\n        x.position.lat() == marker.position.lat() &&\n        x.position.lng() == marker.position.lng()\n    );\n    console.log('is marker already: ', index);\n    if (index >= 0) {\n      this.markers[index].setMap(null);\n      this.markers.splice(index, 1);\n      return;\n    }\n  }\n  async presentActionSheet() {\n    const actionSheet = await this.actionSheetCtrl.create({\n      header: 'Added Marker',\n      subHeader: '',\n      buttons: [\n        {\n          text: 'Remove',\n          role: 'destructive',\n          data: {\n            action: 'delete',\n          },\n        },\n        {\n          text: 'Save',\n          data: {\n            action: 'share',\n          },\n        },\n        {\n          text: 'Cancel',\n          role: 'cancel',\n          data: {\n            action: 'cancel',\n          },\n        },\n      ],\n    });\n    await actionSheet.present();\n  }\n  ngOnDestroy() {\n    // this.googleMaps.event.removeAllListeners();\n    if (this.mapClickListener)\n      this.googleMaps.event.removeListener(this.mapClickListener);\n    if (this.markerClickListener)\n      this.googleMaps.event.removeListener(this.markerClickListener);\n  }\n```\nEstas funciones ayudan a que maps tenga funcionalidades como generar un marker o punto en el mapa para seÃ±alar algo y con ayuda de la otra funciÃ³n podemos hacer que la longitud y latitud de ese punto se nos muestre en nuestra pÃ¡gina, asi como poder hacer que el marcador pueda cambiar y que nos muestre la localizaciÃ³n del nuevo punto.\n\nPara que nuestro marcador se muestre necesitamos indicar como va a ser el marcador por lo que necesitamos una imagen formato \".png\" para que se muestre donde demos click en nuestro mapa, para ello necesitamos agregar el archivo en la carpeta icons y generar la carpeta icons, en donde vamos a pegar nuestro icono del marcador de Google Maps\n\n```bash\nnombreproyecto/\nâââ node_modules/\nâââ src/   <----------\nâ   âââassets/  <---------- se encuentra aqui\nâ   â   âââicons <---------- Crear esta carpeta\nâ   â   â   âââimagen.png  <---------- nuestra imagen\n```\n\n\n- 5 EjecuciÃ³n\nPara poder probar nuestro proyecto y ver los cambios que hemos hecho a nuestro proyecto se debe ejecutar\n```bash\nnpx ionic start \n```\nahora el programa empezarÃ¡ a generar nuestro proyecto para el sistema en el que estamos ejecutando, en este caso\nWindows.\nPara poder revisarlo en android es necesario tener un programa que pueda generar el paquete APK\nEn este caso Android Studio.\nPara esto primero necesitaremos hacer un build para android por lo que ejecutamos:\nUn problema que suele ocurrir al momento de generar el build de Android es que no suele encontrar las credenciales de Firebase, para solucionar esto hay que pasar las credenciales de enviroment.ts y copiarlas tambien en enviroment.prod.ts\n```bash\nnpx ionic build android\n```\nAl ejecutar ese cÃ³digo empezarÃ¡ a generar los archivos necesarios para que el mismo proyecto que vimos en web se\npueda ver en Android.\nLuego de tener generado el build para android se debe ejecutar el comando\n\n```bash\nnpx ionic capacitor open android\n```\nCon esto se abrirÃ¡ Android Studio y si ya tenemos un dispositivo configurado, podremos ver como se ve nuestro\nproyecto en android\n\n## Capturas\n### Web\n![image](https://github.com/4lanPz/AM_GoogleMaps_2024A/assets/117743495/abb9a50c-87b5-4be6-9eb5-d8c5bdd3a598)\n\n![image](https://github.com/4lanPz/AM_GoogleMaps_2024A/assets/117743495/c56e0eab-0dbb-4404-abbc-dcf17389cbdf)\n\n### Android\n\n![image](https://github.com/4lanPz/AM_GoogleMaps_2024A/assets/117743495/576c17be-ae4c-473b-beb6-5b7540825ed4)\n\n![image](https://github.com/4lanPz/AM_GoogleMaps_2024A/assets/117743495/8c59407a-4cb3-4d64-8012-21c59f9e4248)\n\n"
}
